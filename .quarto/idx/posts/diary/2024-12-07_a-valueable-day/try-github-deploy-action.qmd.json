{"title":"搞定博客的自动发布","markdown":{"yaml":{"title":"搞定博客的自动发布","subtitle":"之前的手动shell script发布要终结了","description":"自己突破一下","author":"adp","date":"2024-12-07 16:46:55","date-modified":"2024-12-07 19:33:59","categories":["github","deploy","action"],"keywords":["Github","Deploy","Action"],"tags":["Github","Deploy","Action"]},"headingText":"提问的技巧","containsRefs":false,"markdown":"\n\n手动发布台辛苦了，今天就在AI的加持下，迈向自动发布吧。\n\n问: 我已经配置号服务器，只要发布内容放入服务器www文件夹即可正常浏览。我\n也配置号了quarto，每次渲染好的发布内容都放在本地项目文件夹publish中。我\n已有GitHub账号。现\n在请指导我将publish同步到github中，然后让github自动管理和同步内容到我的服务器发布目录www。如\n果需要我提供相关的信息和设置，请详细说明。\n\n::: callout-tip\n\n你做了什么，需要ai给你什么？输\n入，输出，算法（基本步骤），这样ai可以给你更好的回答。所\n以你知道的越多，ai越能帮助你，把需要的概念加以命名，ai就更好第引用回复了。\n:::\n\nAI回答: 好的！以\n下是如何将 Quarto 渲染生成的 publish 文件夹内容自动同步到 GitHub，并通过 GitHub 将内容部署到服务器的完整步骤。我\n们将逐步指导您完成从 Git 到服务器的自动化流程。\n\n以下是实现目标的完整流程：\n\n1.  **创建 GitHub 仓库并上传 `publish` 文件夹的内容**。\n\n2.  **本地初始化 Git 仓库并推送到 GitHub**。\n\n3.  **在服务器上设置 SSH 私钥/公钥，允许 GitHub 访问服务器。**\n\n4.  **配置 GitHub Actions 自动同步内容到服务器的 `www` 目录**。\n\n如果需要任何具体信息（如服务器 SSH 配置等），请根据提示提供相关信息。\n\n------------------------------------------------------------------------\n\n### **Step 1: 创建 GitHub 仓库**\n\n1.  登陆 [GitHub](https://github.com/)，在右上角点击 **\"+\"**，选择 **“New repository”**。\n\n2.  创建一个新的仓库：\n\n    -   **Repository name**: 输入仓库名称（例如 `my-quarto-site`）。\n\n    -   确保仓库的 **Visibility** 选择为 Public 或 Private（根据需求）。\n\n    -   不要初始化 `README` 文件或添加 `.gitignore` 文件。\n\n3.  创建成功后，记下仓库的 Clone 地址（通常是 `https://github.com/yourusername/my-quarto-site.git` 或用 SSH 格式）。\n\n    结果: 顺利完成 **git\\@github.com:ming-git/adp.git**\n\n------------------------------------------------------------------------\n\n### **Step 2: 初始化本地 Git 仓库并推送到 GitHub**\n\n现在需要将您的 Quarto 项目的 `publish` 文件夹同步到 GitHub 仓库。\n\n1.  打开您的终端或 RStudio 的终端面板，并进入 Quarto 项目目录：\n\n    ```         \n    cd /path/to/your/project\n    ```\n\n2.  进入渲染生成的 `publish` 文件夹：\n\n    ```         \n    cd publish\n    ```\n\n3.  初始化一个 Git 仓库：\n\n    ```         \n    git init\n    ```\n\n4.  添加所有内容到 Git 仓库并提交：\n\n    ```         \n    git add .\n    git commit -m \"Initial commit of Quarto publish content\"\n    ```\n\n5.  添加远程仓库地址： **使用 HTTPS**：\n\n    ```         \n    git remote add origin https://github.com/yourusername/my-quarto-site.git\n    ```\n\n    **或者使用 SSH（如配置了 SSH 密钥）：**2024-12-07 17:25:55 使用该方式\n\n    ```         \n    git remote add origin git@github.com:yourusername/my-quarto-site.git\n    ```\n\n6.  推送到 GitHub 仓库的 `main` 分支：\n\n    ```         \n    git branch -M main\n    git push -u origin main\n    ```\n\n此时，您的 `publish` 文件夹中的所有内容应该已经成功推送到 GitHub 仓库。\n\n2024-12-07 17:29:23 check ok\n\n------------------------------------------------------------------------\n\n### **Step 3: 设置服务器的 SSH 配置**\n\n为了让 GitHub 可以自动将内容同步到您的服务器，需要设置 GitHub 的访问权限，通过 **SSH 密钥** 将 GitHub 和服务器连接。\n\n#### **1. 配置服务器上的 SSH 密钥：**\n\n1.  登陆服务器（通过 SSH 登录）。在\n    服务器终端执行以下命令，检查是否已存在 SSH 密钥：\n\n    ```         \n    ls ~/.ssh/id_rsa\n    ```\n\n2.  如果不存在，创建一个新的单独的 SSH 密钥对：\n\n    ```         \n    ssh-keygen -t rsa -b 4096 -C \"zhuquanming@gmail.com\" -f ~/.ssh/id_rsa_github\n    ```\n\n    ![](images/ssh-keygen.png)\n\n    按要求输入路径（或按 ENTER 直接使用默认路径），设置密码可选。\n\n3.  将生成的公钥复制到剪贴板：\n\n    ```         \n    cat ~/.ssh/id_rsa_github.pub\n    ```\n\n    复制终端输出的内容。\n\n#### **2. 添加公钥到 GitHub：**\n\n1.  登陆 GitHub，点击右上角头像，进入 **Settings(账号settings)**。\n\n2.  找到左侧的 **SSH and GPG keys**，点击 **New SSH key**。\n\n3.  添加 `.ssh/id_rsa_github.pub` 的内容到 GitHub，并点击保存。\n\n4.  修改服务器ssh config file\n\n    编辑或创建 SSH 配置文件，告诉 SSH 使用正确的密钥文件。\n\n    1.  打开或创建文件 `~/.ssh/config`：\n\n        ```         \n        vi ~/.ssh/config\n        ```\n\n    2.  添加以下内容（将 `~/.ssh/id_rsa` 替换为你添加到 GitHub 的密钥路径，例如 `~/.ssh/id_rsa_github`）：\n\n        ```         \n        Host github.com\n            HostName github.com\n            User git\n            IdentityFile ~/.ssh/id_rsa_github\n            IdentitiesOnly yes\n        ```\n\n    3.  保存退出 (：wq)。\n\n#### **3. 测试 SSH 连接：**\n\n回到服务器，测试 GitHub 是否可以访问：\n\n```         \nssh -T git@github.com\n```\n\n如果显示如下内容，表示连接成功：\n\n```         \nHi yourusername! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n------------------------------------------------------------------------\n\n### **Step 4: 配置 GitHub Actions 自动化部署**\n\nGitHub Actions 是 GitHub 内置的一种工具，用来自动化工作流。在\n我们配置后，GitHub 会在每次您推送内容到 `main` 分支时，自动将 `publish` 文件夹的内容同步到服务器的 `www` 目录。\n\n#### **1. 在 GitHub 仓库中创建 Actions 配置文件：**\n\n1.  在项目中创建一个 `.github/workflows` 文件夹（如果不存在）。\n\n    ::: callout-caution\n    ## 不是在渲染输出目录下喔\n\n    犯了一个错误，建立在了渲染输出目录下，结果直接被删除了哈, 对于git还是有点陌生，好久不用，之前学习的mosh git教程又完全忘记了。\n    :::\n\n2.  在文件夹下新建文件 `deploy2tclh.yml`，并配置以下内容：\n\n```         \nname: Deploy to Tencent Lighthouse Server\n\non:\n  push:\n    branches:\n      - main  # 当推送到 main 分支时触发\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n    # 1. 检出最新代码\n    - name: Checkout code\n      uses: actions/checkout@v3\n\n    # 2. 使用 rsync 将内容上传到服务器\n    - name: Sync to server\n      run: |\n        rsync -avz --delete ./ user@your-server-ip:/path/to/your/www/\n      env:\n        RSYNC_RSH: \"ssh -i ~/.ssh/id_rsa\"\n```\n\n#### **2. 配置服务器访问的私钥：**\n\n为了让 GitHub Actions 在服务器上使用 SSH，还需将服务器的 **私钥** 添加到 GitHub 仓库的 Secrets。\n\n1.  登录 GitHub 仓库，进入 **Settings \\> Secrets and variables \\> Actions**。\n\n    ::: {.callout-tip appearance=\"simple\"}\n    ## 账号Setting和项目Setting要区分\n\n    注意：是在[https://github.com/ming-git/adpblog/settings](https://github.com/ming-git/adp/settings) 项目的setting中修改；而不是个人账户的setting （<https://github.com/settings/profile>）中。浪\n    费了点时间。\n    :::\n\n2.  点击 **New repository secret**，命名为 `SSH_PRIVATE_KEY`，并将服务器私钥（`~/.ssh/id_rsa_github` 的内容）粘贴进去。\n\n    ::: callout-tip\n    ## 将错就错吧\n\n    本来是tclh，麻烦了就不改写了哈\n\n    2024-12-08 07:55:15 恢复到原始的命名\n    :::\n\n#### **3. 修改 `deploy2tclh.yml` 引用 Secrets 中的私钥：**\n\n更新 `deploy2tclh.yml` 文件：\n\n```         \n- name: Sync to server\n  run: |\n    mkdir -p ~/.ssh/ \n    echo \"$SSH_PRIVATE_KEY\" > ~/.ssh/id_rsa_github\n    chmod 600 ~/.ssh/id_rsa_github\n    rsync -avz --delete ./ user@your-server-ip:/path/to/your/www/\n  env:\n    SSH_PRIVATE_KEY: ${{ secrets.SSH_TLCH_PRIVATE_KEY }}\n```\n\n### 最大的坑就在这里-AI的拐点\n\n今天以为早上起来就可以搞定，结果无论怎么折腾，都会一堆的错误集中就反映在rsync上，花费了很多的时间去确认ssh的设置是否正确，其实最后发现ssh设置没有问题。\n\n这就是在使用AI中最大的坑，一旦AI没在正确的路上，那么后来很难改出来来，经验告诉我，如果三次他都无法给出正确答案，这时候你就要需要去改变思路了-AI已经在一条不归路上了。在\n利用AI编写auotomator的自动化流程中，也有这个感觉-如果AI接连三次给不出正确方案，那多半它后面也就无法自己改出螺旋，这是就是人的价值了，需要人类改变方式，通一个全新的角度给出一个提示，所以这里面人的重要性大概就在这儿吧，我们的价值在于思考，确定方向，而AI完成简单重复，查阅数据补全工艺的工作。\n\n## 终于成功了\n\n微信里搜索“github action 部署文件到服务器” 看到提到了“easingthemes/ssh-deploy”，感觉这是一个突破点，再看看，是把ssh和rsync打包一起的，看来方向上解决了第一次里直接调用rsync的问题。\n\n马上让ai指令“github中还有哪些类似 easingthemes/ssh-deploy 的文件部署actions？”\n。\n\n![](images/ai-lookuop-easingthemes:ssh-deploy.jpeg)\n\n再接再厉，给她指令\n\n::: callout-tip\n## ai prompt\n\nhttps://github.com/marketplace/actions/ssh-deploy 请参考，重新编写部署代码\n:::\n\n``` yaml\nname: Deploy to Tencent Lighthouse Server\n\non:\n  push:\n    branches:\n      - main  # 当推送到 main 分支时触发\n    paths:\n      - www/**     # 仅当 www 文件夹及其子目录或文件发生更改时触发\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      # Step 1: 检出代码\n      - name: Checkout Code\n        uses: actions/checkout@v3\n\n      # Step 2: 执行 SSH Deploy Action\n      - name: SSH Deploy to Server\n        uses: easingthemes/ssh-deploy@main\n        env:\n          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}\n          ARGS: ${{ secrets.RSYNC_ARGS }} # rsync 的参数，确保文件更新同步\n          SOURCE: ${{ secrets.SOURCE }} # 本地需要同步的文件夹\n          REMOTE_HOST: ${{ secrets.HOST }} # 目标服务器的 IP 地址\n          REMOTE_USER: ${{ secrets.USER }} # 用于连接服务器的用户名\n          TARGET: ${{ secrets.TARGET }} # 服务器上的目标路径\n```\n\n::: callout-important\n## 补充说明\n\nAI给吃的hard code - ARGS，SOURCE， REMOTE_HOST， REMOTE_USER， TARGET是直接天上了敏感数据。最\n佳实践是在github action的screts里设置再通过\\${{ secrets.《SECRETS.NAME》 }} 的方式来引用。\n:::\n\n------------------------------------------------------------------------\n\n### **Step 5: 测试工作流**\n\n1.  回到本地终端，修改您的 `publish` 文件夹的内容（比如新建一个文件或修改现有内容）。\n\n2.  提交新的内容到 GitHub 仓库：\n\n    ```         \n    git add .\n    git commit -m \"Update content\"\n    git push origin main\n    ```\n\n3.  到 GitHub 仓库的 **Actions** 页面，您应该可以看到 `Deploy to Server` 工作流被触发。\n\n4.  如果配置正确，内容将自动同步到您服务器的 `www` 目录。\n\n------------------------------------------------------------------------\n\n### **问题排查**\n\n1.  如果同步失败，请检查服务器 `www` 目录的路径是否正确。\n\n2.  测试 `rsync` 是否能够在服务器和 GitHub Actions 工作流中正常工作。\n\n3.  确认 SSH 设置是否正确，`id_rsa` 可以正常授权访问服务器。\n\n------------------------------------------------------------------------\n\n### **总结**\n\n通过上述步骤，您可以实现：\n\n1.  本地 Quarto 渲染生成内容到 `publish` 文件夹。\n\n2.  使用 Git 将 `publish` 文件夹内容上传到 GitHub。\n\n3.  配置 GitHub Actions，让 `www` 的内容自动部署到服务器的 `www` 目录，完成发布的自动化。\n\n4.  关于.gitigore的的设置也费了大力气，总是感觉自己理解和实际的输出不一致，以后再聊聊。\n","srcMarkdownNoYaml":"\n\n手动发布台辛苦了，今天就在AI的加持下，迈向自动发布吧。\n\n问: 我已经配置号服务器，只要发布内容放入服务器www文件夹即可正常浏览。我\n也配置号了quarto，每次渲染好的发布内容都放在本地项目文件夹publish中。我\n已有GitHub账号。现\n在请指导我将publish同步到github中，然后让github自动管理和同步内容到我的服务器发布目录www。如\n果需要我提供相关的信息和设置，请详细说明。\n\n::: callout-tip\n## 提问的技巧\n\n你做了什么，需要ai给你什么？输\n入，输出，算法（基本步骤），这样ai可以给你更好的回答。所\n以你知道的越多，ai越能帮助你，把需要的概念加以命名，ai就更好第引用回复了。\n:::\n\nAI回答: 好的！以\n下是如何将 Quarto 渲染生成的 publish 文件夹内容自动同步到 GitHub，并通过 GitHub 将内容部署到服务器的完整步骤。我\n们将逐步指导您完成从 Git 到服务器的自动化流程。\n\n以下是实现目标的完整流程：\n\n1.  **创建 GitHub 仓库并上传 `publish` 文件夹的内容**。\n\n2.  **本地初始化 Git 仓库并推送到 GitHub**。\n\n3.  **在服务器上设置 SSH 私钥/公钥，允许 GitHub 访问服务器。**\n\n4.  **配置 GitHub Actions 自动同步内容到服务器的 `www` 目录**。\n\n如果需要任何具体信息（如服务器 SSH 配置等），请根据提示提供相关信息。\n\n------------------------------------------------------------------------\n\n### **Step 1: 创建 GitHub 仓库**\n\n1.  登陆 [GitHub](https://github.com/)，在右上角点击 **\"+\"**，选择 **“New repository”**。\n\n2.  创建一个新的仓库：\n\n    -   **Repository name**: 输入仓库名称（例如 `my-quarto-site`）。\n\n    -   确保仓库的 **Visibility** 选择为 Public 或 Private（根据需求）。\n\n    -   不要初始化 `README` 文件或添加 `.gitignore` 文件。\n\n3.  创建成功后，记下仓库的 Clone 地址（通常是 `https://github.com/yourusername/my-quarto-site.git` 或用 SSH 格式）。\n\n    结果: 顺利完成 **git\\@github.com:ming-git/adp.git**\n\n------------------------------------------------------------------------\n\n### **Step 2: 初始化本地 Git 仓库并推送到 GitHub**\n\n现在需要将您的 Quarto 项目的 `publish` 文件夹同步到 GitHub 仓库。\n\n1.  打开您的终端或 RStudio 的终端面板，并进入 Quarto 项目目录：\n\n    ```         \n    cd /path/to/your/project\n    ```\n\n2.  进入渲染生成的 `publish` 文件夹：\n\n    ```         \n    cd publish\n    ```\n\n3.  初始化一个 Git 仓库：\n\n    ```         \n    git init\n    ```\n\n4.  添加所有内容到 Git 仓库并提交：\n\n    ```         \n    git add .\n    git commit -m \"Initial commit of Quarto publish content\"\n    ```\n\n5.  添加远程仓库地址： **使用 HTTPS**：\n\n    ```         \n    git remote add origin https://github.com/yourusername/my-quarto-site.git\n    ```\n\n    **或者使用 SSH（如配置了 SSH 密钥）：**2024-12-07 17:25:55 使用该方式\n\n    ```         \n    git remote add origin git@github.com:yourusername/my-quarto-site.git\n    ```\n\n6.  推送到 GitHub 仓库的 `main` 分支：\n\n    ```         \n    git branch -M main\n    git push -u origin main\n    ```\n\n此时，您的 `publish` 文件夹中的所有内容应该已经成功推送到 GitHub 仓库。\n\n2024-12-07 17:29:23 check ok\n\n------------------------------------------------------------------------\n\n### **Step 3: 设置服务器的 SSH 配置**\n\n为了让 GitHub 可以自动将内容同步到您的服务器，需要设置 GitHub 的访问权限，通过 **SSH 密钥** 将 GitHub 和服务器连接。\n\n#### **1. 配置服务器上的 SSH 密钥：**\n\n1.  登陆服务器（通过 SSH 登录）。在\n    服务器终端执行以下命令，检查是否已存在 SSH 密钥：\n\n    ```         \n    ls ~/.ssh/id_rsa\n    ```\n\n2.  如果不存在，创建一个新的单独的 SSH 密钥对：\n\n    ```         \n    ssh-keygen -t rsa -b 4096 -C \"zhuquanming@gmail.com\" -f ~/.ssh/id_rsa_github\n    ```\n\n    ![](images/ssh-keygen.png)\n\n    按要求输入路径（或按 ENTER 直接使用默认路径），设置密码可选。\n\n3.  将生成的公钥复制到剪贴板：\n\n    ```         \n    cat ~/.ssh/id_rsa_github.pub\n    ```\n\n    复制终端输出的内容。\n\n#### **2. 添加公钥到 GitHub：**\n\n1.  登陆 GitHub，点击右上角头像，进入 **Settings(账号settings)**。\n\n2.  找到左侧的 **SSH and GPG keys**，点击 **New SSH key**。\n\n3.  添加 `.ssh/id_rsa_github.pub` 的内容到 GitHub，并点击保存。\n\n4.  修改服务器ssh config file\n\n    编辑或创建 SSH 配置文件，告诉 SSH 使用正确的密钥文件。\n\n    1.  打开或创建文件 `~/.ssh/config`：\n\n        ```         \n        vi ~/.ssh/config\n        ```\n\n    2.  添加以下内容（将 `~/.ssh/id_rsa` 替换为你添加到 GitHub 的密钥路径，例如 `~/.ssh/id_rsa_github`）：\n\n        ```         \n        Host github.com\n            HostName github.com\n            User git\n            IdentityFile ~/.ssh/id_rsa_github\n            IdentitiesOnly yes\n        ```\n\n    3.  保存退出 (：wq)。\n\n#### **3. 测试 SSH 连接：**\n\n回到服务器，测试 GitHub 是否可以访问：\n\n```         \nssh -T git@github.com\n```\n\n如果显示如下内容，表示连接成功：\n\n```         \nHi yourusername! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n------------------------------------------------------------------------\n\n### **Step 4: 配置 GitHub Actions 自动化部署**\n\nGitHub Actions 是 GitHub 内置的一种工具，用来自动化工作流。在\n我们配置后，GitHub 会在每次您推送内容到 `main` 分支时，自动将 `publish` 文件夹的内容同步到服务器的 `www` 目录。\n\n#### **1. 在 GitHub 仓库中创建 Actions 配置文件：**\n\n1.  在项目中创建一个 `.github/workflows` 文件夹（如果不存在）。\n\n    ::: callout-caution\n    ## 不是在渲染输出目录下喔\n\n    犯了一个错误，建立在了渲染输出目录下，结果直接被删除了哈, 对于git还是有点陌生，好久不用，之前学习的mosh git教程又完全忘记了。\n    :::\n\n2.  在文件夹下新建文件 `deploy2tclh.yml`，并配置以下内容：\n\n```         \nname: Deploy to Tencent Lighthouse Server\n\non:\n  push:\n    branches:\n      - main  # 当推送到 main 分支时触发\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n    # 1. 检出最新代码\n    - name: Checkout code\n      uses: actions/checkout@v3\n\n    # 2. 使用 rsync 将内容上传到服务器\n    - name: Sync to server\n      run: |\n        rsync -avz --delete ./ user@your-server-ip:/path/to/your/www/\n      env:\n        RSYNC_RSH: \"ssh -i ~/.ssh/id_rsa\"\n```\n\n#### **2. 配置服务器访问的私钥：**\n\n为了让 GitHub Actions 在服务器上使用 SSH，还需将服务器的 **私钥** 添加到 GitHub 仓库的 Secrets。\n\n1.  登录 GitHub 仓库，进入 **Settings \\> Secrets and variables \\> Actions**。\n\n    ::: {.callout-tip appearance=\"simple\"}\n    ## 账号Setting和项目Setting要区分\n\n    注意：是在[https://github.com/ming-git/adpblog/settings](https://github.com/ming-git/adp/settings) 项目的setting中修改；而不是个人账户的setting （<https://github.com/settings/profile>）中。浪\n    费了点时间。\n    :::\n\n2.  点击 **New repository secret**，命名为 `SSH_PRIVATE_KEY`，并将服务器私钥（`~/.ssh/id_rsa_github` 的内容）粘贴进去。\n\n    ::: callout-tip\n    ## 将错就错吧\n\n    本来是tclh，麻烦了就不改写了哈\n\n    2024-12-08 07:55:15 恢复到原始的命名\n    :::\n\n#### **3. 修改 `deploy2tclh.yml` 引用 Secrets 中的私钥：**\n\n更新 `deploy2tclh.yml` 文件：\n\n```         \n- name: Sync to server\n  run: |\n    mkdir -p ~/.ssh/ \n    echo \"$SSH_PRIVATE_KEY\" > ~/.ssh/id_rsa_github\n    chmod 600 ~/.ssh/id_rsa_github\n    rsync -avz --delete ./ user@your-server-ip:/path/to/your/www/\n  env:\n    SSH_PRIVATE_KEY: ${{ secrets.SSH_TLCH_PRIVATE_KEY }}\n```\n\n### 最大的坑就在这里-AI的拐点\n\n今天以为早上起来就可以搞定，结果无论怎么折腾，都会一堆的错误集中就反映在rsync上，花费了很多的时间去确认ssh的设置是否正确，其实最后发现ssh设置没有问题。\n\n这就是在使用AI中最大的坑，一旦AI没在正确的路上，那么后来很难改出来来，经验告诉我，如果三次他都无法给出正确答案，这时候你就要需要去改变思路了-AI已经在一条不归路上了。在\n利用AI编写auotomator的自动化流程中，也有这个感觉-如果AI接连三次给不出正确方案，那多半它后面也就无法自己改出螺旋，这是就是人的价值了，需要人类改变方式，通一个全新的角度给出一个提示，所以这里面人的重要性大概就在这儿吧，我们的价值在于思考，确定方向，而AI完成简单重复，查阅数据补全工艺的工作。\n\n## 终于成功了\n\n微信里搜索“github action 部署文件到服务器” 看到提到了“easingthemes/ssh-deploy”，感觉这是一个突破点，再看看，是把ssh和rsync打包一起的，看来方向上解决了第一次里直接调用rsync的问题。\n\n马上让ai指令“github中还有哪些类似 easingthemes/ssh-deploy 的文件部署actions？”\n。\n\n![](images/ai-lookuop-easingthemes:ssh-deploy.jpeg)\n\n再接再厉，给她指令\n\n::: callout-tip\n## ai prompt\n\nhttps://github.com/marketplace/actions/ssh-deploy 请参考，重新编写部署代码\n:::\n\n``` yaml\nname: Deploy to Tencent Lighthouse Server\n\non:\n  push:\n    branches:\n      - main  # 当推送到 main 分支时触发\n    paths:\n      - www/**     # 仅当 www 文件夹及其子目录或文件发生更改时触发\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      # Step 1: 检出代码\n      - name: Checkout Code\n        uses: actions/checkout@v3\n\n      # Step 2: 执行 SSH Deploy Action\n      - name: SSH Deploy to Server\n        uses: easingthemes/ssh-deploy@main\n        env:\n          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}\n          ARGS: ${{ secrets.RSYNC_ARGS }} # rsync 的参数，确保文件更新同步\n          SOURCE: ${{ secrets.SOURCE }} # 本地需要同步的文件夹\n          REMOTE_HOST: ${{ secrets.HOST }} # 目标服务器的 IP 地址\n          REMOTE_USER: ${{ secrets.USER }} # 用于连接服务器的用户名\n          TARGET: ${{ secrets.TARGET }} # 服务器上的目标路径\n```\n\n::: callout-important\n## 补充说明\n\nAI给吃的hard code - ARGS，SOURCE， REMOTE_HOST， REMOTE_USER， TARGET是直接天上了敏感数据。最\n佳实践是在github action的screts里设置再通过\\${{ secrets.《SECRETS.NAME》 }} 的方式来引用。\n:::\n\n------------------------------------------------------------------------\n\n### **Step 5: 测试工作流**\n\n1.  回到本地终端，修改您的 `publish` 文件夹的内容（比如新建一个文件或修改现有内容）。\n\n2.  提交新的内容到 GitHub 仓库：\n\n    ```         \n    git add .\n    git commit -m \"Update content\"\n    git push origin main\n    ```\n\n3.  到 GitHub 仓库的 **Actions** 页面，您应该可以看到 `Deploy to Server` 工作流被触发。\n\n4.  如果配置正确，内容将自动同步到您服务器的 `www` 目录。\n\n------------------------------------------------------------------------\n\n### **问题排查**\n\n1.  如果同步失败，请检查服务器 `www` 目录的路径是否正确。\n\n2.  测试 `rsync` 是否能够在服务器和 GitHub Actions 工作流中正常工作。\n\n3.  确认 SSH 设置是否正确，`id_rsa` 可以正常授权访问服务器。\n\n------------------------------------------------------------------------\n\n### **总结**\n\n通过上述步骤，您可以实现：\n\n1.  本地 Quarto 渲染生成内容到 `publish` 文件夹。\n\n2.  使用 Git 将 `publish` 文件夹内容上传到 GitHub。\n\n3.  配置 GitHub Actions，让 `www` 的内容自动部署到服务器的 `www` 目录，完成发布的自动化。\n\n4.  关于.gitigore的的设置也费了大力气，总是感觉自己理解和实际的输出不一致，以后再聊聊。\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":{"html_document":{"toc":true}},"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../css/styles.css","../../../css/navbar-top-height.css"],"toc":true,"number-sections":true,"output-file":"try-github-deploy-action.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.39","theme":{"light":"flatly","dark":"darklyflatly"},"editor":"source","editor_options":{"markdown":{"wrap":72,"references":{"location":"block"},"canonical":true}},"toc-location":"right","toc-title":"内容提要","author-title":"作者","published-title":"日期","date-format":"YYYY/MM/DD,第ww周","title":"搞定博客的自动发布","subtitle":"之前的手动shell script发布要终结了","description":"自己突破一下","author":"adp","date":"2024-12-07 16:46:55","date-modified":"2024-12-07 19:33:59","categories":["github","deploy","action"],"keywords":["Github","Deploy","Action"],"tags":["Github","Deploy","Action"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}